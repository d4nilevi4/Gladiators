//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherInteractedColliderId;

    public static Entitas.IMatcher<InputEntity> InteractedColliderId {
        get {
            if (_matcherInteractedColliderId == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.InteractedColliderId);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherInteractedColliderId = matcher;
            }

            return _matcherInteractedColliderId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Gladiators.Gameplay.Input.InteractedColliderId interactedColliderId { get { return (Gladiators.Gameplay.Input.InteractedColliderId)GetComponent(InputComponentsLookup.InteractedColliderId); } }
    public int InteractedColliderId { get { return interactedColliderId.Value; } }
    public bool hasInteractedColliderId { get { return HasComponent(InputComponentsLookup.InteractedColliderId); } }

    public InputEntity AddInteractedColliderId(int newValue) {
        var index = InputComponentsLookup.InteractedColliderId;
        var component = (Gladiators.Gameplay.Input.InteractedColliderId)CreateComponent(index, typeof(Gladiators.Gameplay.Input.InteractedColliderId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public InputEntity ReplaceInteractedColliderId(int newValue) {
        var index = InputComponentsLookup.InteractedColliderId;
        var component = (Gladiators.Gameplay.Input.InteractedColliderId)CreateComponent(index, typeof(Gladiators.Gameplay.Input.InteractedColliderId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public InputEntity RemoveInteractedColliderId() {
        RemoveComponent(InputComponentsLookup.InteractedColliderId);
        return this;
    }
}
