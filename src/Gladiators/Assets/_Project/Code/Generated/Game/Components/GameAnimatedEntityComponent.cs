//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnimatedEntity;

    public static Entitas.IMatcher<GameEntity> AnimatedEntity {
        get {
            if (_matcherAnimatedEntity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnimatedEntity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnimatedEntity = matcher;
            }

            return _matcherAnimatedEntity;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gladiators.Gameplay.Animation.AnimatedEntity animatedEntity { get { return (Gladiators.Gameplay.Animation.AnimatedEntity)GetComponent(GameComponentsLookup.AnimatedEntity); } }
    public int AnimatedEntity { get { return animatedEntity.Value; } }
    public bool hasAnimatedEntity { get { return HasComponent(GameComponentsLookup.AnimatedEntity); } }

    public GameEntity AddAnimatedEntity(int newValue) {
        var index = GameComponentsLookup.AnimatedEntity;
        var component = (Gladiators.Gameplay.Animation.AnimatedEntity)CreateComponent(index, typeof(Gladiators.Gameplay.Animation.AnimatedEntity));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnimatedEntity(int newValue) {
        var index = GameComponentsLookup.AnimatedEntity;
        var component = (Gladiators.Gameplay.Animation.AnimatedEntity)CreateComponent(index, typeof(Gladiators.Gameplay.Animation.AnimatedEntity));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnimatedEntity() {
        RemoveComponent(GameComponentsLookup.AnimatedEntity);
        return this;
    }
}
